name: Auto Build and Deploy on Dev

on:
  push:
    branches:
      - launchpad

jobs:
  setup-commit-hashes:
    if: github.event.sender.login != 'Lyearn Dev'
    runs-on: ubuntu-latest
    outputs:
      previous: ${{ steps.export.outputs.previous }}
      current: ${{ steps.export.outputs.current }}

    steps:
      - name: Export commit hashes
        id: export
        run: |-
          PREVIOUS_COMMIT_HASH=${{ github.event.before }}
          CURRENT_COMMIT_HASH=${{ github.sha }}

          echo "Current commit: $CURRENT_COMMIT_HASH"
          echo "Commit to compare with: $PREVIOUS_COMMIT_HASH"

          echo "::set-output name=previous::$PREVIOUS_COMMIT_HASH"
          echo "::set-output name=current::$CURRENT_COMMIT_HASH"

  detect-package-changes:
    needs: setup-commit-hashes
    runs-on: ubuntu-latest
    outputs:
      changed-packages: ${{ steps.changes.outputs.changed-packages }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        run: |-
          PREVIOUS_COMMIT_HASH=${{ needs.setup-commit-hashes.outputs.previous }}
          CURRENT_COMMIT_HASH=${{ needs.setup-commit-hashes.outputs.current }}

          echo "::group::Detecting changed packages"
          CHANGED_PACKAGES=$(git diff --name-only $PREVIOUS_COMMIT_HASH..$CURRENT_COMMIT_HASH | grep '^packages/' | cut -d/ -f2 | sort -u || echo -n '')
          echo "Changed packages: $CHANGED_PACKAGES"
          echo "::endgroup::"

          echo "::set-output name=changed-packages::$CHANGED_PACKAGES"

  build-packages:
    needs: detect-package-changes
    if: ${{ needs.detect-package-changes.outputs.changed-packages != '' }}
    runs-on: ubuntu-latest

    env:
      GH_USERNAME: ${{ secrets.GH_GOPRIVATE_USERNAME }}
      GH_ACCESS_TOKEN: ${{ secrets.GH_GOPRIVATE_ACCESS_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "^1.20.0"

      - name: Setup Workspace
        run: |-
          echo "$(go version)"
          make setup-workspace

      - name: Setup Github private module credentials
        run: |-
          git config --global url.https://$GH_USERNAME:$GH_ACCESS_TOKEN@github.com/.insteadOf https://github.com/

      - name: Check builds
        run: |-
          make build-all-packages

  create-packages-matrix:
    needs: [build-packages, detect-package-changes]
    if: ${{ needs.detect-package-changes.outputs.changed-packages != '' }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create_matrix.outputs.matrix }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create matrix
        id: create_matrix
        run: |-
          packages=$(find packages -name go.mod -exec dirname {} \; | jq -R -s -c 'split("\n")[:-1]')
          echo "packages: $packages"
          echo "::set-output name=matrix::{\"package\": $packages}"

  tag-packages:
    needs: [create-packages-matrix, detect-package-changes]
    if: ${{ needs.detect-package-changes.outputs.changed-packages != '' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix: ${{ fromJson(needs.create-packages-matrix.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: launchpad
          default_bump: patch
          tag_prefix: ${{ matrix.package }}/v
          fetch_all_tags: true # by default this action fetched only last 100 tags.

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

  sync-and-commit-packages:
    needs: [tag-packages, detect-package-changes]
    if: ${{ needs.detect-package-changes.outputs.changed-packages != '' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      GH_USERNAME: ${{ secrets.GH_GOPRIVATE_USERNAME }}
      GH_ACCESS_TOKEN: ${{ secrets.GH_GOPRIVATE_ACCESS_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Github private module credentials
        run: |-
          git config --global url.https://$GH_USERNAME:$GH_ACCESS_TOKEN@github.com/.insteadOf https://github.com/

      - name: Update package dependencies
        id: update_package_dependencies
        run: |-
          for folder in packages/*; do
            PACKAGE=${folder%/}
            LATEST_TAG=$(git describe --abbrev=0 --tags --match="$PACKAGE/*" 2>&1 | awk -F'/' '{print $NF}')
            make replace-deps module=$PACKAGE version=$LATEST_TAG
          done;
          make build-all-packages

      - name: Commit modified dependencies
        run: |-
          git config --local user.email "dev@lyearn.com"
          git config --local user.name "Lyearn Dev"
          git add -A
          git commit -m "chore: release new packages version" -a || exit 0

      - name: Push changes
        # Force push to bypass the branch protection rule
        run: |-
          git push --force
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  detect-consumer-changes:
    needs: [sync-and-commit-packages, setup-commit-hashes]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    outputs:
      changed-consumers: ${{ steps.changes.outputs.changed-consumers }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        run: |-
          PREVIOUS_COMMIT_HASH=${{ needs.setup-commit-hashes.outputs.previous }}
          CURRENT_COMMIT_HASH=${{ needs.setup-commit-hashes.outputs.current }}
          echo "::group::Detecting changed consumers"
          CHANGED_CONSUMERS=$(git diff --name-only $PREVIOUS_COMMIT_HASH..$CURRENT_COMMIT_HASH | grep '^consumers/' | cut -d/ -f2 | sort -u | tr '\n' ' ' || echo -n '')
          echo "Changed consumers: $CHANGED_CONSUMERS"
          echo "::endgroup::"
          echo "::set-output name=changed-consumers::$CHANGED_CONSUMERS"

  upgrade-and-build-consumers:
    needs: detect-consumer-changes
    if: ${{ always() && needs.detect-consumer-changes.outputs.changed-consumers != '' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      GH_USERNAME: ${{ secrets.GH_GOPRIVATE_USERNAME }}
      GH_ACCESS_TOKEN: ${{ secrets.GH_GOPRIVATE_ACCESS_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "^1.21.0"

      - name: Setup Workspace
        run: |-
          echo "$(go version)"
          make setup-workspace

      - name: Setup Github private module credentials
        run: |-
          git config --global url.https://$GH_USERNAME:$GH_ACCESS_TOKEN@github.com/.insteadOf https://github.com/

      - name: Check builds
        run: |-
          CHANGED_CONSUMERS="${{ needs.detect-consumer-changes.outputs.changed-consumers }}"
          for consumer in $CHANGED_CONSUMERS; do
            cd consumers/$consumer
            go build -v -o /dev/null || exit 1
            cd - > /dev/null
          done

      - name: Update package dependencies
        run: |-
          CHANGED_CONSUMERS="${{ needs.detect-consumer-changes.outputs.changed-consumers }}"
          CHANGED_CONSUMERS_TRIMMED=$(echo $CHANGED_CONSUMERS | sed 's/ *$//')
          make update-consumer-deps consumers="$CHANGED_CONSUMERS_TRIMMED"
          make build-all-consumers

      - name: Commit modified dependencies
        run: |-
          git config --local user.email "dev@lyearn.com"
          git config --local user.name "Lyearn Dev"
          git pull
          git add -A
          git commit -m "chore: upgrade packages" -a || exit 0

      - name: Push changes
        # Force push to bypass the branch protection rule
        run: |-
          git push --force
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-consumers-matrix:
    needs: [upgrade-and-build-consumers, detect-consumer-changes]
    if: ${{ always() && needs.detect-consumer-changes.outputs.changed-consumers != '' }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create_matrix.outputs.matrix }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create matrix
        id: create_matrix
        run: |-
          CHANGED_CONSUMERS="${{ needs.detect-consumer-changes.outputs.changed-consumers }}"
          CHANGED_CONSUMERS_TRIMMED=$(echo $CHANGED_CONSUMERS | sed 's/ *$//')
          consumers=$(echo "[\"$(echo $CHANGED_CONSUMERS_TRIMMED | sed 's/ /","/g')\"]")
          echo "consumers: $consumers"
          echo "::set-output name=matrix::{\"consumer\": $consumers}"
          echo "create_matrix directory: ${consumers/${{ matrix.consumer }}}"

  build-push-and-deploy-consumers:
    needs: [create-consumers-matrix, detect-consumer-changes]
    if: ${{ always() && needs.detect-consumer-changes.outputs.changed-consumers != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.create-consumers-matrix.outputs.matrix) }}
    defaults:
      run:
        working-directory: consumers/${{ matrix.consumer }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Pull latest changes made by previous jobs
        run: |-
          git pull
          echo "Current Directory inside Check dockerfile existence : $(pwd)"
          echo "Content in current directory : $(ls -l)"

      - name: Check dockerfile existence
        id: check_dockerfile
        continue-on-error: true
        run: |-
          test -f dockerfile
          echo "check_dockerfile=$?" >> $GITHUB_ENV

      - name: Set short SHA to Environment variable
        uses: benjlevesque/short-sha@v1.2
        if: env.check_dockerfile == '0'

      - name: Configure AWS Access Key
        if: env.check_dockerfile == '0'
        run: |-
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws eks --region ap-south-1 update-kubeconfig --name ${{ secrets.CLUSTER_NAME_DEVELOPMENT }}
          echo "Image tag is sha-${{ env.SHA }}"
          echo "DOCKER_IMAGE=${{ secrets.DOCKER_HUB_USERNAME }}/lyearn-go-${{ matrix.consumer }}-consumer:sha-${{ env.SHA }}" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v1
        if: env.check_dockerfile == '0'
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Login to GAR
        uses: docker/login-action@v1
        if: env.check_dockerfile == '0'
        with:
          registry: asia-south1-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCLOUD_GCR_SERVICE_KEY }}

      - name: Build image and push to Docker Hub and GAR
        uses: docker/build-push-action@v2
        if: env.check_dockerfile == '0'
        with:
          context: ./consumers/${{ matrix.consumer }}
          push: true
          build-args: |
            GH_GOPRIVATE_ACCESS_TOKEN=${{ secrets.GH_GOPRIVATE_ACCESS_TOKEN }}
            GH_GOPRIVATE_USERNAME=${{ secrets.GH_GOPRIVATE_USERNAME }}
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/lyearn-go-${{ matrix.consumer }}-consumer:sha-${{ env.SHA }}
            asia-south1-docker.pkg.dev/${{ secrets.GOOGLE_PROJECT_ID }}/${{ secrets.DOCKER_HUB_USERNAME }}/lyearn-go-${{ matrix.consumer }}-consumer:sha-${{ env.SHA }}

      - name: Deploy the image
        if: env.check_dockerfile == '0'
        run: |-
          echo "Docker image to be deployed: $DOCKER_IMAGE"
          kubectl set image statefulset/go-${{ matrix.consumer }}-consumer go-${{ matrix.consumer }}-consumer-cntnr=$DOCKER_IMAGE -n services --record

  detect-service-changes:
    needs: [sync-and-commit-packages, setup-commit-hashes]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    outputs:
      changed-services: ${{ steps.changes.outputs.changed-services }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        run: |-
          PREVIOUS_COMMIT_HASH=${{ needs.setup-commit-hashes.outputs.previous }}
          CURRENT_COMMIT_HASH=${{ needs.setup-commit-hashes.outputs.current }}

          echo "::group::Detecting changed services"
          CHANGED_SERVICES=$(git diff --name-only $PREVIOUS_COMMIT_HASH..$CURRENT_COMMIT_HASH | grep '^services/' | cut -d/ -f2 | sort -u | tr '\n' ' ' || echo -n '')
          echo "Changed services: $CHANGED_SERVICES"
          echo "::endgroup::"

          echo "::set-output name=changed-services::$CHANGED_SERVICES"

  upgrade-and-build-services:
    needs: detect-service-changes
    if: ${{ always() && needs.detect-service-changes.outputs.changed-services != '' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      GH_USERNAME: ${{ secrets.GH_GOPRIVATE_USERNAME }}
      GH_ACCESS_TOKEN: ${{ secrets.GH_GOPRIVATE_ACCESS_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "^1.20.0"

      - name: Setup Workspace
        run: |-
          echo "$(go version)"
          make setup-workspace

      - name: Setup Github private module credentials
        run: |-
          git config --global url.https://$GH_USERNAME:$GH_ACCESS_TOKEN@github.com/.insteadOf https://github.com/

      - name: Check builds
        run: |-
          CHANGED_SERVICES="${{ needs.detect-service-changes.outputs.changed-services }}"
          for service in $CHANGED_SERVICES; do
            cd services/$service
            go build -v -o /dev/null || exit 1
            cd - > /dev/null
          done

      - name: Update package dependencies
        run: |-
          CHANGED_SERVICES="${{ needs.detect-service-changes.outputs.changed-services }}"
          CHANGED_SERVICES_TRIMMED=$(echo $CHANGED_SERVICES | sed 's/ *$//')
          make update-service-deps services="$CHANGED_SERVICES_TRIMMED"
          make build-all-services

      - name: Commit modified dependencies
        run: |-
          git config --local user.email "dev@lyearn.com"
          git config --local user.name "Lyearn Dev"
          git pull
          git add -A
          git commit -m "chore: upgrade packages" -a || exit 0

      - name: Push changes
        # Force push to bypass the branch protection rule
        run: |-
          git push --force
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-services-matrix:
    needs: [upgrade-and-build-services, detect-service-changes]
    if: ${{ always() && needs.detect-service-changes.outputs.changed-services != '' }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create_matrix.outputs.matrix }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create matrix
        id: create_matrix
        run: |-
          CHANGED_SERVICES="${{ needs.detect-service-changes.outputs.changed-services }}"
          CHANGED_SERVICES_TRIMMED=$(echo $CHANGED_SERVICES | sed 's/ *$//')
          services=$(echo "[\"$(echo $CHANGED_SERVICES_TRIMMED | sed 's/ /","/g')\"]")
          echo "services: $services"
          echo "::set-output name=matrix::{\"service\": $services}"

  build-push-and-deploy-services:
    needs: [create-services-matrix, detect-service-changes]
    if: ${{ always() && needs.detect-service-changes.outputs.changed-services != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.create-services-matrix.outputs.matrix) }}
    defaults:
      run:
        working-directory: services/${{ matrix.service }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Pull latest changes made by previous jobs
        run: |-
          git pull

      - name: Set short SHA to Environment variable
        uses: benjlevesque/short-sha@v1.2

      - name: Configure AWS Access Key
        run: |-
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws eks --region ap-south-1 update-kubeconfig --name ${{ secrets.CLUSTER_NAME_DEVELOPMENT }}
          echo "Image tag is sha-${{ env.SHA }}"
          echo "DOCKER_IMAGE=${{ secrets.DOCKER_HUB_USERNAME }}/lyearn-go-${{ matrix.service }}-service:sha-${{ env.SHA }}" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Login to GAR
        uses: docker/login-action@v1
        with:
          registry: asia-south1-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCLOUD_GCR_SERVICE_KEY }}

      - name: Build image and push to Docker Hub and GAR
        uses: docker/build-push-action@v2
        with:
          context: ./services/${{ matrix.service }}
          push: true
          build-args: |
            GH_GOPRIVATE_ACCESS_TOKEN=${{ secrets.GH_GOPRIVATE_ACCESS_TOKEN }}
            GH_GOPRIVATE_USERNAME=${{ secrets.GH_GOPRIVATE_USERNAME }}
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/lyearn-go-${{ matrix.service }}-service:sha-${{ env.SHA }}
            asia-south1-docker.pkg.dev/${{ secrets.GOOGLE_PROJECT_ID }}/${{ secrets.DOCKER_HUB_USERNAME }}/lyearn-go-${{ matrix.service }}-service:sha-${{ env.SHA }}

      - name: Deploy the image
        run: |-
          echo "Docker image to be deployed: $DOCKER_IMAGE"
          kubectl set image deployment/go-${{ matrix.service }}-service-deployment go-${{ matrix.service }}-service-cntnr=$DOCKER_IMAGE -n services --record

      - name: Wait for image updation
        continue-on-error: false
        timeout-minutes: 10
        run: kubectl rollout status deployment/go-${{ matrix.service }}-service-deployment -n services

  sync-gateway:
    needs: [build-push-and-deploy-services, detect-service-changes]
    if: ${{ always() && needs.detect-service-changes.outputs.changed-services != '' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set short SHA to Environment variable
        uses: benjlevesque/short-sha@v1.2

      - name: Configure AWS Access Key
        run: |-
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws eks --region ap-south-1 update-kubeconfig --name ${{ secrets.CLUSTER_NAME_DEVELOPMENT }}

      - name: Deleting existing successfully completed jobs
        timeout-minutes: 2
        run: |-
          kubectl delete jobs -n services --field-selector status.successful=1 -l app.lyearn.com/name=supergraph-sync-cron-job

      - name: Trigger job to update supergraph
        continue-on-error: false
        run: |-
          kubectl create job --from=cronjob/supergraph-sync-cron-job -n services supergraph-sync-job-manual-${{ env.SHA }}

      - name: Wait for job to complete
        continue-on-error: false
        timeout-minutes: 2
        run: kubectl wait --for=condition=complete job/supergraph-sync-job-manual-${{ env.SHA }} -n services --timeout=2m

      - name: Restart gateway service deployment
        continue-on-error: false
        timeout-minutes: 2
        run: kubectl rollout restart deployment/gateway-service -n services
